name: Update Latest PR Date

on:
  push:
    branches:
      - main

jobs:
  update-data:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install date-fns
        run: npm install date-fns date-fns-tz # date-fns-tzはタイムゾーン処理に必要

      - name: Get latest merged PR date and format in JST
        id: get_formatted_pr_date
        run: |
          # GitHub APIから最新のPR日時 (UTC) を取得
          LATEST_PR_DATE_UTC=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/${{ github.repository }}/pulls?state=closed&base=main&sort=updated&direction=desc&per_page=1" | \
            jq -r '.[0].merged_at')

          echo "Latest PR date (UTC): $LATEST_PR_DATE_UTC"

          # JavaScriptで日時をJSTに変換し、フォーマット
          FORMATTED_JST_DATE=$(node -e "
            const { format } = require('date-fns');
            const { toZonedTime } = require('date-fns-tz');

            const utcDate = new Date('$LATEST_PR_DATE_UTC');
            // 'Asia/Tokyo' は日本標準時のタイムゾーンID
            const jstDate = toZonedTime(utcDate, 'Asia/Tokyo');
            // 'yyyy-MM-dd HH:mm' 形式でフォーマット
            const formattedDate = format(jstDate, 'yyyy-MM-dd HH:mm');
            console.log(formattedDate);
          ")

          echo "Formatted JST Date: $FORMATTED_JST_DATE"

          # data.json を作成/上書き
          echo "{\"latestPrMergedAt\": \"$FORMATTED_JST_DATE\"}" > date.json
          
      - name: Commit and push if changed
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          if ! git diff --quiet date.json; then
            echo "Changes detected in date.json. Committing and pushing..."
            git add date.json
            git commit -m "Update latest PR date [skip ci]"
            git push
            echo "Committed and pushed date.json."
          else
            echo "No changes detected in data.json. Skipping commit and push."
          fi
